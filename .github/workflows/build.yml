name: Build Tauri App

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      # Node.js & pnpm 세팅
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 선택: node_modules 캐싱 (pnpm install 더 빠르게)
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Rust 설치 & 캐싱
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-src

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust targets
        run: |
          rustup target add x86_64-pc-windows-msvc
          rustup target add aarch64-apple-darwin

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          choco install -y sqlite

      - name: Install system dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install sqlite
          brew install create-dmg

      # 프론트엔드 빌드
      - name: Install frontend dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm build

      # macOS 빌드 (ad-hoc 서명 포함)
      - name: Build Tauri app (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          export MACOSX_DEPLOYMENT_TARGET=10.15
          pnpm tauri build --config '{"bundle":{"macOS":{"signingIdentity":"-","hardenedRuntime":false}}}'

          # zip 아카이브 생성 시 권한 유지 (손상된 파일 방지)
          cd src-tauri/target/release/bundle/macos
          ditto -c -k --sequesterRsrc --keepParent *.app ../../shelves-macos.zip
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      # Windows 빌드
      - name: Build Tauri app (Windows)
        if: matrix.platform == 'windows-latest'
        run: pnpm tauri build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      # 아티팩트 업로드 (macOS)
      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: shelves-macos
          path: |
            src-tauri/target/release/bundle/dmg/
            src-tauri/target/release/shelves-macos.zip

      # 아티팩트 업로드 (Windows)
      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: shelves-windows
          path: src-tauri/target/release/bundle/
